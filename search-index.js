var searchIndex = {};
searchIndex['primes'] = {"items":[[0,"","primes","A basic library for finding primes, providing a basic Iterator over all primes. It is not as fast as\n`slow_primes`, but it is meant to be easy to use!",null,null],[3,"PrimeSet","","A prime generator, using the Sieve of Eratosthenes.",null,null],[3,"PrimeSetIter","","An iterator over generated primes. Created by PrimeSet::iter or\nPrimeSet::generator",null,null],[5,"factors","","Find all prime factors of a number\nDoes not use a PrimeSet, but simply counts upwards",null,{"inputs":[{"name":"u64"}],"output":{"name":"vec"}}],[5,"factors_uniq","","Find all unique prime factors of a number",null,{"inputs":[{"name":"u64"}],"output":{"name":"vec"}}],[5,"is_prime","","Test whether a number is prime. Checks every odd number up to sqrt(n).",null,{"inputs":[{"name":"u64"}],"output":{"name":"bool"}}],[11,"new","","A new prime generator, primed with 2 and 3",0,{"inputs":[{"name":"primeset"}],"output":{"name":"primeset"}}],[11,"expand","","Finds one more prime, and adds it to the list",0,{"inputs":[{"name":"primeset"}],"output":null}],[11,"len","","Number of primes found so far",0,{"inputs":[{"name":"primeset"}],"output":{"name":"usize"}}],[11,"list","","Return all primes found so far as a slice",0,null],[11,"generator","","Iterator over all primes not yet found",0,{"inputs":[{"name":"primeset"}],"output":{"name":"primesetiter"}}],[11,"iter","","Iterator over all primes, starting with 2. If you don't care about the \"state\" of the\nPrimeSet, this is what you want!",0,{"inputs":[{"name":"primeset"}],"output":{"name":"primesetiter"}}],[11,"iter_vec","","Iterator over just the primes found so far",0,{"inputs":[{"name":"primeset"}],"output":{"name":"iter"}}],[11,"find","","Find the next largest prime from a number\nReturns (idx, prime)\nNote that if n is prime, then the output will be (idx, n)",0,null],[11,"is_prime","","Check if a number is prime\nNote that this only requires primes up to n.sqrt() to be generated, and will generate\nthem as necessary on its own.",0,{"inputs":[{"name":"primeset"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"find_vec","","Find the next largest prime from a number, if it is within the already-found list\nReturns (idx, prime)\nNote that if n is prime, then the output will be (idx, n)",0,{"inputs":[{"name":"primeset"},{"name":"u64"}],"output":{"name":"option"}}],[11,"get","","Get the nth prime, even if we haven't yet found it",0,{"inputs":[{"name":"primeset"},{"name":"usize"}],"output":{"name":"u64"}}],[11,"prime_factors","","Get the prime factors of a number, starting from 2, including repeats",0,{"inputs":[{"name":"primeset"},{"name":"u64"}],"output":{"name":"vec"}}],[6,"Output","","",null,null],[11,"index","","",0,{"inputs":[{"name":"primeset"},{"name":"usize"}],"output":{"name":"u64"}}],[6,"Item","","",null,null],[11,"next","","",1,{"inputs":[{"name":"primesetiter"}],"output":{"name":"option"}}]],"paths":[[3,"PrimeSet"],[3,"PrimeSetIter"]]};
initSearch(searchIndex);
